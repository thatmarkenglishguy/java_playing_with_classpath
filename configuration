# vim: filetype=bash:

if [ -z ${BASH_SOURCE} ]; then
  configuration_script_dir=$(readlink -f $(dirname "${0}"))
else
  configuration_script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

if [ -z "${1}" ]
then
  if [ -f "${configuration_script_dir}/.project_configuration" ]
  then
    project_configuration_path="${configuration_script_dir}/.project_configuration"
  elif [ -f "${configuration_script_dir}/project_configuration" ]
  then
    project_configuration_path="${configuration_script_dir}/project_configuration"
  else
    echo "Unable to locate project_configuration (which is weird)." >&2
    exit 1
  fi
else
  project_configuration_path="${1}"
fi

if [ -z "${JAVA_HOME}" ]
then
  echo 'JAVA_HOME not set. '>&2
  exit 1
fi

use_java_home="${JAVA_HOME}"

case $(uname -a | tr '[:upper:]' '[:lower:]') in
  *darwin*)
    os_name=darwin
    ;;
  *mingw*|*msys*)
    os_name=msys
    use_java_home=$(cygpath "${JAVA_HOME}")
    ;;
  *cygwin*)
    os_name=cygwin
    use_java_home=$(cygpath "${JAVA_HOME}")
    ;;
  *)
    os_name=unknown_os
    ;;
esac

if [[ $(java -version 2>&1 | head -n1) =~ \"(.*)\" ]]
then
  java_version="${BASH_REMATCH[1]}"
else
  echo "Unable to determine java version" >&2
  exit 2
fi

if [[ $(java -version 2>&1 | head -n2) =~ build[[:space:]]*([^\)]+)\) ]]
then
  java_build="${BASH_REMATCH[1]}"
else
  echo "Unable to determine java build" >&2
  exit 3
fi

if [ ! -f "${project_configuration_path}" ]
then
  echo "Unable to find project configuration: ${project_configuration_path}" >&2
  exit 4
else
  source "${project_configuration_path}"
fi

root_directory="${root_directory:-.}"
source_directory="${root_directory}/src"
package_subdirectory="$(echo "${package_name}" | tr '.' '/')"
source_code_directory="${source_directory}/main/java/${package_subdirectory}"
test_code_directory="${source_directory}/test/java/${package_subdirectory}"
jni_source_code_directory="${source_code_directory}/jni"
jni_java_path="${jni_source_code_directory}/JniExample.java"
jni_native_code_directory="${source_directory}/generated/jni"
jni_native_code_rust_directory="${root_directory}"
jni_native_code_rust_source_directory="${source_directory}/generated/jni/rust"
manifest_directory="${root_directory}/META-INF"
manifest_path="${manifest_directory}/MANIFEST.MF"
jni_native_rust_lib_path="${jni_native_code_rust_source_directory}/lib.rs"

build_directory="${root_directory}/build"
intermediate_directory="${build_directory}/intermediate"
rust_target_directory="${root_directory}/target"
jni_native_makefile_path="${build_directory}/Makefile"
jni_native_name="${configuration_name}"
jni_native_name_hyphenated="$(echo ${jni_native_name} | tr '_' '-')"
jni_native_name_lower="${jni_native_name}"
jni_native_name_upper="$(echo ${jni_native_name} | tr [:lower:] [:upper:])"

jni_native_c_name="${jni_native_name}_c"
jni_native_rust_name="${jni_native_name}_rust"

case "${os_name}" in
  msys|cygwin)
    jni_native_c_dylib="${jni_native_c_name}.dll"
    jni_native_rust_dylib="${jni_native_rust_name}.dll"
    ;;
  darwin)
    jni_native_c_dylib="lib${jni_native_c_name}.dylib"
    jni_native_rust_dylib="lib${jni_native_rust_name}.dylib"
    ;;
  *)
    jni_native_c_dylib="${jni_native_c_name}.so"
    jni_native_rust_dylib="${jni_native_rust_name}.so"
    ;;
esac

jni_native_rust_name_upper="$(echo ${jni_native_rust_name} | tr [:lower:] [:upper:])"
classfiles_directory="${build_directory}/classfiles"
classfiles_package_subdirectory="${package_subdirectory}/${configuration_name}"
classfiles_package_directory="${classfiles_directory}/${classfiles_package_subdirectory}"
gradle_project_name='example'
gradle_jar_directory="${build_directory}/libs"
gradle_jar_path="${gradle_jar_directory}/${gradle_project_name}.jar"
jar_directory="${build_directory}/jar"
jar_path="${jar_directory}/example.jar"
jni_native_build_directory="${build_directory}/jni"
if [ -f "${jar_path}" ]
then
  use_jar_path="${jar_path}"
else
  use_jar_path="${gradle_jar_path}"
fi

function get_jni_c_header_path() {
  local jni_header_path
  jni_header_path=$(find "${jni_native_code_directory}" -name '*.h' | head -n 1)
  echo "${jni_header_path}"
}

function get_jni_c_source_path() {
  local jni_header_path
  local jni_source_path
  jni_header_path="${1}"
  jni_source_path="${jni_header_path/.h/.cpp}" 
  echo "${jni_source_path}"
}

function get_jni_c_object_path() {
  local jni_source_path
  local jni_object_path
  jni_source_path="${1}"
  jni_object_path="${jni_source_path/.cpp/.o}"
  # Delete everything up to src.
  jni_object_path="${jni_object_path#*src/}" 
  echo "${jni_object_path}"
}

function get_jni_build_intermediate_from_src_path() {
  local jni_src_path
  local jni_build_path
  jni_src_path="${1}"
  jni_build_path="${jni_src_path#*src/}"
  jni_build_path="${intermediate_directory}/${jni_build_path}"

  echo "${jni_build_path}"
}

function get_makefile_to_src_path() {
  local jni_src_path
  local jni_makefile_path
  jni_src_path="${1}"
  jni_makefile_path="${jni_src_path#*src/}"
  jni_makefile_path="../src/${jni_makefile_path}"
  echo "${jni_makefile_path}"
}

function get_path_relative_to_src() {
  local absolute_path
  local src_relative_path
  absolute_path="${1}"
  src_relative_path="src/${absolute_path#*src/}"
  echo "${src_relative_path}"
}

jni_native_intermediate_directory="$(get_jni_build_intermediate_from_src_path ${jni_native_code_directory})"
jni_native_rust_src_relative_lib_path="$(get_path_relative_to_src ${jni_native_rust_lib_path})"
