#!/usr/bin/env bash

#Deduce this script's directory
if [ -z ${BASH_SOURCE} ]; then
  script_dir=$(readlink -f $(dirname "${0}"))
else
  script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
tab='	'

##Â Helper functions
function sed_inplace() {
  case "${os_name}" in
    darwin)
      sed -i '' "${@}"
      ;;
    *)
      sed -i'' "${@}"
      ;;
  esac
}

function ensure_dir() {
  if [ ! -d "${1}" ]
  then
    if [ -n "${2}" ]
    then
      echo "${2}"
    fi
    mkdir -p "${1}"
  fi
}

function rust_jni_type_from_c_jni_type() {
  local c_jni_type
  local rust_jni_type
  local exit_code

  c_jni_type="${1}"
  rust_jni_type='unknown rust jni type'
  exit_code=0

  case "${c_jni_type}" in
    void)
      rust_jni_type='void'
      ;;
    jlong|jstring)
      rust_jni_type="${c_jni_type}"
      ;;
    *)
      echo "ARGH HOW DO I TRANSLATE C TYPE '${c_jni_type}' TO RUST TYPE ???" >&2
      exit_code=1
      ;;
  esac

  echo "${rust_jni_type}"
  return ${exit_code}
}

source "${script_dir}/configuration" "${@}"
if [ "${project_configuration_path}" != "${configuration_script_dir}/.project_configuration" ]
then
  cat <<-EOF >"${configuration_script_dir}/.project_configuration"
source "${project_configuration_path}"
EOF
fi

## Implementation functions
function make_typical_java() {
  local name
  local name_lower
  name="${1}"
  name_lower="$(echo ${name} | tr '[:upper:]' '[:lower:]')"
  if [ ! -f "${java_source_code_directory}/${name}.java" ]
  then
    cat <<-EOF >"${java_source_code_directory}/${name}.java"
package ${package_name}.${configuration_name};

public class ${name} {
  public void sayHi${name}() {
    System.out.println("Hi ${name_lower}!");
  }
}
EOF
  fi
}

function make_main_java() {
  local source_code_directory
  local typical_java_classes
  local java_class
  local java_instance

  source_code_directory="${1}"
  declare -a typical_java_classes
  typical_java_classes=( "${@:2}" )

  if [ ! -f "${java_source_code_directory}/Main.java" ]
  then
    cat <<-EOF >"${java_source_code_directory}/Main.java"
package ${package_name}.${configuration_name};

public class Main {
    public static void main(String[] args) {
EOF
    for java_class in "${typical_java_classes[@]}"
    do
      java_instance=$(echo "${java_class}" | tr '[:upper:]' '[:lower:]')

      cat <<-EOF >>"${java_source_code_directory}/Main.java"
      final ${java_class} ${java_instance} = new ${java_class}();
      ${java_instance}.sayHi${java_class}();

EOF
    done

    cat <<-EOF >>"${java_source_code_directory}/Main.java"
      JniExampleInit.init();
      final JniExample jniExample = new JniExample();
      jniExample.sayHiJni();

//      System.exit(123);
      System.exit(0);
    }
}
EOF
  fi
}

function make_manifest_file() {
  local manifest_directory
  local manifest_path
  manifest_directory="${1}"
  manifest_path="${2}"

  echo
  echo 'Making Manifest'
  ensure_dir "${manifest_directory}"

  if [ ! -f "${manifest_path}" ]
  then
    cat <<-EOF >"${manifest_path}"
Manifest-Version: 1.0
Implementation-Title: ${configuration_name}
Built-By: some scripts
Implementation-Vendor-Id: ${package_name}
Created-By: ${java_version} (AdoptOpenJDK)
Build-Jdk: ${java_build}
Main-Class: ${package_name}.${configuration_name}.Main
EOF
  fi
}

function run_gradle_init() {
  local sed_command
  local main_test_path
  local package_name_pattern
  local gradle_relative_rust_target_directory
  local gradle_relative_build_directory
  gradle_relative_rust_target_directory=$(get_root_path_relative_to_gradle "${rust_target_directory}")
  gradle_relative_build_directory=$(get_root_path_relative_to_gradle "${build_directory}")

  main_test_path="${java_test_code_directory}/MainTest.java"
  package_name_pattern="${package_name//./\.}"

  echo 'Running gradle init...'

  gradle init \
    --package "${package_name}" \
    --project-name "${gradle_project_name}" \
    --dsl groovy \
    --test-framework 'junit-jupiter' \
    --type 'java-application'

  rm "${java_source_code_directory}/App.java"
  mv "${java_test_code_directory}/AppTest.java" "${main_test_path}"

  echo
  echo 'Adjusting build.gradle'
  sed_inplace "s/${package_name_pattern}\.App/${package_name}.${configuration_name}.Main/" "${gradle_root_directory}/build.gradle"
  cat <<-EOF >>"${gradle_root_directory}/build.gradle"

jar {
  manifest {
    attributes(
      "Implementation-Title": "${configuration_name}",
      "Built-By": "some scripts and some gradle",
      "Implementation-Vendor-Id": "${package_name}",
      "Created-By": "${java_version} (JDK)",
      "Build-Jdk": "${java_build}",
      "Main-Class": "${package_name}.${configuration_name}.Main"
    )
  }

  archiveName '${gradle_project_name}.jar'
}

sourceSets {
  main {
    resources {
      srcDirs "${gradle_relative_rust_target_directory}"
      include "release/${jni_native_rust_dylib}"
      include "debug/${jni_native_rust_dylib}"
      srcDirs "${gradle_relative_build_directory}"
      include "release/${jni_native_c_dylib}"
      include "debug/${jni_native_c_dylib}"
    }
  }
}

run {
  systemProperties System.getProperties()
}
EOF

  read -r -d '' sed_command <<-EOCOMMAND
s/AppTest/MainTest/

/@Test void/,/}/ {
  # Change the test name
  s/appHasAGreeting/mainTest/

  # Skip the test declaration
  /@Test/n

  # Delete the other lines
  d
}
# Put the class brace back at end ($)
\$i\\
    }
EOCOMMAND
  echo
  echo 'Adjusting the AppTest'
  sed_inplace -e "${sed_command}" "${main_test_path}"
}

function make_jni_example_init_java() {
  local jni_java_source_code_directory
  local jni_native_name
  local jni_native_name_upper
  local jni_native_name_hyphenated

  jni_java_source_code_directory="${1}"
  jni_native_name="${2}"
  jni_native_name_upper="${3}"
  jni_native_name_hyphenated="${4}"

  if [ ! -f "${jni_java_source_code_directory}/JniExampleInit.java" ]
  then
    cat <<-EOF >"${jni_java_source_code_directory}/JniExampleInit.java"
package ${package_name}.${configuration_name};

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;

final class JniExampleInit {
    private static final String C_LIBRARY_NAME = "${jni_native_c_name}";
    private static final String RUST_LIBRARY_NAME = "${jni_native_rust_name}";
    private static boolean loaded = false;

    public static synchronized void init() {
        if (loaded) {
            return;
        }

        final boolean useDebugBuild = "TRUE".equalsIgnoreCase(System.getenv("${jni_native_name_upper}_DEBUG")) || Boolean.getBoolean("${jni_native_name_hyphenated}.debug-build");
        final boolean useRustBuild = "TRUE".equalsIgnoreCase(System.getenv("${jni_native_rust_name_upper}")) || Boolean.getBoolean("${jni_native_name_hyphenated}.rust");
        final String libraryName = useRustBuild ? System.mapLibraryName(RUST_LIBRARY_NAME) : System.mapLibraryName(C_LIBRARY_NAME);
        System.out.println("Library name: " + libraryName);

        final String debugOrRelease = useDebugBuild ? "debug" : "release";
        System.out.println("Using the " + debugOrRelease + " Jni Example");
        final String path = "/" + debugOrRelease + "/" + libraryName;
        System.out.println("Resource stream is: " + path);

        try (final InputStream libInputStream = JniExampleInit.class.getResourceAsStream(path)) {
            if (libInputStream == null) {
                throw new UnsatisfiedLinkError(String.format("%s not found on resource path", path));
            }

            final File tempDirectory = Files.createTempDirectory("${jni_native_name_hyphenated}" + "-" + debugOrRelease).toFile();
            System.out.println("Temp directory is: " + tempDirectory.getPath());
            tempDirectory.deleteOnExit();

            final File libraryFile = new File(tempDirectory, libraryName);
            System.out.println("Library file is: " + libraryFile.getPath());
            libraryFile.deleteOnExit();

            Files.copy(libInputStream, libraryFile.toPath());

            System.load(libraryFile.getAbsolutePath());
            loaded = true;
        } catch (final IOException e) {
            System.out.println("Classpath: " + System.getProperty("java.class.path"));
            throw new LinkageError(String.format("Error loading Jni Example library %s", libraryName), e);
        }
    }
}
EOF
  fi
}

function make_rust_jni() {
  local jni_native_rust_name
  local jni_native_code_rust_directory
  local jni_native_code_rust_source_directory
  local sed_command
  jni_native_rust_name="${1}"
  jni_native_code_rust_directory="${2}"
  jni_native_code_rust_source_directory="${3}"
  read -r -d '' sed_command <<-EOCOMMAND
/\[dependencies\]/{
i\\
[lib]
i\\
name = \"${jni_native_rust_name}\"
i\\
crate-type = [\"cdylib\"]
i\\
path = \"${jni_native_rust_src_relative_lib_path}\"
i\\
\\

a\\
# the Rust bindings to the Java Native Interface
a\\
jni = "0.17.0"
a\\
\\

}
EOCOMMAND
  rm -f "${jni_native_code_rust_directory}/Cargo.toml"
  case "${os_name}" in
    msys|cygwin)
      rustup override set stable-x86_64-pc-windows-gnu
      ;;
  esac

  cargo init --lib --name "${jni_native_rust_name}" "${jni_native_code_rust_directory}"

  # Cargo keeps adding the same commented out entries to the .gitignore so let's ignore it.
  git checkout .gitignore

  sed_inplace -e "${sed_command}" "${jni_native_code_rust_directory}/Cargo.toml"

  ensure_dir "${jni_native_code_rust_source_directory}"
  cat <<-'EOF' >"${jni_native_rust_lib_path}"
mod jni_example;
EOF

  ensure_dir "${jni_native_code_rust_source_directory}/jni_example"
}

function make_jni_example() {
  # For now, rely on globals.
  # Creates JniExample class with native method,
  # c header and implementation,
  # Makefile
  local jni_c_header_path
  local jni_c_source_path
  local jni_c_object_path
  local jni_c_header_makefile_path
  local jni_c_source_makefile_path
  local jni_function_regex
  local fni_args_regex
  local jni_source_ready_to_generate
  local jni_rust_source_path
  local capture_jni_args

  if [ ! -f "${jni_java_path}" ]
  then
    cat <<-EOF >"${jni_java_path}"
package ${package_name}.${configuration_name};

public class JniExample {
    private native void sayHiJniNative();
    private native String giveMeAStringJniNative(long longArg, String stringArg);

    public void sayHiJni() {
      sayHiJniNative();

      final String result = giveMeAStringJniNative(123, "string arg from java");
      System.out.println("Result from giveMeAStringJniNative(123, \\"string arg from java\\"): " + result);
    }
}
EOF

    echo "Making Jni Makefile: '${jni_native_makefile_path}'"
    if [ ! -f "${jni_native_makefile_path}" ]
    then
      cat <<-EOF >"${jni_native_makefile_path}"
# Generated by ${0}.
# Wouldn't advise editing and expecting to keep your changes.
INTERMEDIATE_DIR ?= intermediate
OUTPUT_DIR ?= .
INCLUDE_DIRS += ${use_java_home}/include
EOF
      case "${os_name}" in
        msys|cygwin)
            cat <<-EOF >>"${jni_native_makefile_path}"
INCLUDE_DIRS += ${use_java_home}/include/win32
EOF
          ;;
        darwin)
            cat <<-EOF >>"${jni_native_makefile_path}"
INCLUDE_DIRS += ${use_java_home}/include/darwin
EOF
          ;;
      esac
      cat <<-EOF >>"${jni_native_makefile_path}"
CXXFLAGS += -std=c++1z

ifneq (\$(BUILD_NAME),)
  \$(info Defining BUILD_NAME to '\$(BUILD_NAME)')
  CXXFLAGS += -DBUILD_NAME="\$(BUILD_NAME)"
endif

ifeq (\$(OPTIMIZATIONFLAG),)
  \$(info OPTIMIZATIONFLAG is not set)
  OPTIMIZATIONFLAG =-g -O
  \$(info OPTIMIZATIONFLAG is '\$(OPTIMIZATIONFLAG)')
#else
#  \$(info OPTIMIZATIONFLAG is '\$(OPTIMIZATIONFLAG)')
endif

CXXFLAGS += -Wall -Wextra -Wpedantic -pedantic -Weffc++ -pedantic-errors \
-Wdouble-promotion \
\$(OPTIMIZATIONFLAG)
INCLUDE_PARAMS=\$(foreach d, \$(INCLUDE_DIRS), -I\$d)
CXXFLAGS += \$(INCLUDE_PARAMS)

all: \$(OUTPUT_DIR)/${jni_native_c_dylib}

EOF
    fi # endif Makefile not exist

    echo
    echo 'Making Jni native wrapper (note this currently generates a .class file as a side-effect)'
    javac -h "${jni_native_code_directory}" \
      -d ${classfiles_directory} \
      "${jni_java_source_code_directory}/JniExample.java"

    jni_c_header_path="$(get_jni_c_header_path)"
    jni_c_source_path="$(get_jni_c_source_path ${jni_c_header_path})"
    jni_c_object_path="$(get_jni_c_object_path ${jni_c_source_path})"
    jni_c_header_makefile_path="$(get_makefile_to_src_path ${jni_c_header_path})"
    jni_c_source_makefile_path="$(get_makefile_to_src_path ${jni_c_source_path})"
    jni_rust_source_path="${jni_native_code_rust_source_directory}/jni_example/mod.rs"
    jni_function_regex='JNIEXPORT[[:space:]]+(.*)(Java_[^[:space:]]+)[[:space:]]*'
    jni_args_regex='([^;]+);'
    jni_source_ready_to_generate=0
    capture_jni_args=0

    rust_use_jni_objects=''
    rust_use_jni_sys=''
    rust_jni_class_sys_delim=''
    rust_jni_class_objects_delim=''
    use_jni_env_statement=''
    use_jobject_count=0
    while read -r
    do
      if [ ${capture_jni_args} -ne 0 ]
      then
        (( capture_jni_args-- ))
        if [[ "${REPLY}" =~ ${jni_args_regex} ]]
        then
          jni_function_args_line_string="${BASH_REMATCH[1]}"
          jni_function_args_string="${jni_function_args_line_string//[[:space:]\(\)]/}" #Strip space and parentheses
          declare -a jni_function_args
          IFS=',' read -a jni_function_args <<<"${jni_function_args_string}"
          jni_source_ready_to_generate=1
        fi
      elif [[ "${REPLY}" =~ ${jni_function_regex} ]]
      then
        capture_jni_args=1
        jni_function_prefix="${BASH_REMATCH[1]}"
        jni_function_name="${BASH_REMATCH[2]}"
        read -r jni_function_return_type remainder <<<"${jni_function_prefix}"
      fi

      # If first pass at jni c source file
      if [ ! -f "${jni_c_source_path}" ]
      then

        # Start of c source file
        cat <<-EOF >"${jni_c_source_path}"
#include <iostream>
#include "$(basename ${jni_c_header_path})"

#ifndef BUILD_NAME
#define BUILD_NAME UnknownBuild
#endif // BUILD_NAME

#define TEXT2(macro_text) #macro_text
#define TEXT(macro_text) TEXT2(macro_text)
EOF

        # Add c object file to Makefile
        echo "Adding $(basename ${jni_c_object_path}) object file to Makefile."

        cat <<-EOF >>"${jni_native_makefile_path}"
OBJ += \$(INTERMEDIATE_DIR)/${jni_c_object_path}

\$(INTERMEDIATE_DIR)/${jni_c_object_path}: ${jni_c_source_makefile_path} ${jni_c_header_makefile_path}
${tab}\$(CXX) -c -o \$@ \$< \$(CPPFLAGS) \$(CXXFLAGS)

EOF

      fi #endif first pass at jni c source file

      if [ ! -f "${jni_rust_source_path}" ]
      then
        cat <<-EOF >"${jni_rust_source_path}"
#[cfg(debug_assertions)]
const BUILD_TYPE_NAME: &str = "rust debug";

#[cfg(not(debug_assertions))]
const BUILD_TYPE_NAME: &str = "rust release";

EOF
      fi #endif first pass at jni rust source file

      if [ ${jni_source_ready_to_generate} -ne 0 ]
      then
        jni_source_ready_to_generate=0

        #echo "jni_function_prefix: '${jni_function_prefix}'"
        #echo "jni_function_name: '${jni_function_name}'"
        #echo "${jni_function_args_line_string}"
        #echo "jni_function_args:"
        #for arg in "${jni_function_args[@]}"; do echo " '${arg}'"; done
        #echo "jni_function_return_type: '${jni_function_return_type}'"

        ## Handle function arguments
        jni_c_function_args='('
        jni_rust_function_args=''
        jni_arg_counter=1
        jobject_count=0
        c_delim=''
        using_jni_env=0

        for jni_arg in "${jni_function_args[@]}"
        do
          case "${jni_arg}" in
            JNIEnv*)
              use_jni_env_statement='use jni::JNIEnv;'
              jni_c_function_args+="${c_delim}${jni_arg} jni_env"$'\n'
              jni_rust_function_args+="    _env: JNIEnv,"$'\n'
              ;;
            jobject)
              if (( jobject_count == 0 ))
              then
                jni_c_function_args+="${c_delim}${jni_arg} /*jni_class*/"$'\n'
                jni_rust_function_args+="    _class: JClass,"$'\n'
                new_rust_jni_type='JClass'

                if [[ ! "${rust_use_jni_objects}" =~ ${new_rust_jni_type} ]]
                then
                  rust_use_jni_objects+="${rust_jni_class_objects_delim}${new_rust_jni_type}"
                  rust_jni_class_objects_delim=', '
                fi
              else
                jni_c_function_args+="${c_delim}${jni_arg} /*jni_arg${jni_arg_counter}*/"$'\n'
                jni_rust_function_args+="    _jni_arg${jni_arg_counter}: jobject,"$'\n'
                new_rust_jni_type='jobject'
                if [[ ! "${rust_use_jni_sys}" =~ ${new_rust_jni_type} ]]
                then
                  rust_use_jni_sys+="${rust_jni_class_sys_delim}${new_rust_jni_type}"
                  rust_jni_class_sys_delim=', '
                fi
                (( ++jni_arg_counter ))
              fi
              (( ++jobject_count ))
              (( ++use_jobject_count ))
              ;;
            *)
              jni_c_function_args+="${c_delim}${jni_arg} /*jni_arg${jni_arg_counter}*/"$'\n'
              rust_jni_type="$(rust_jni_type_from_c_jni_type "${jni_arg}")"
              jni_rust_function_args+="    _jni_arg${jni_arg_counter}: ${rust_jni_type},"$'\n'

              new_rust_jni_type="$(rust_jni_type_from_c_jni_type "${jni_arg}")"
              case "${new_rust_jni_type}" in
                JClass|JString)
                  if [[ ! "${rust_use_jni_objects}" =~ ${new_rust_jni_type} ]]
                  then
                    rust_use_jni_objects+="${rust_jni_class_objects_delim}${new_rust_jni_type}"
                    rust_jni_class_objects_delim=', '
                  fi
                  ;;
                *)
                  if [[ ! "${rust_use_jni_sys}" =~ ${new_rust_jni_type} ]]
                  then
                    echo "arg type ADDDINGGGG: ${new_rust_jni_type}"
                    rust_use_jni_sys+="${rust_jni_class_sys_delim}${new_rust_jni_type}"
                  fi
                  ;;
              esac

              rust_jni_class_sys_delim=', '
              (( ++jni_arg_counter ))
              ;;
          esac
          c_delim='  ,'
        done

        jni_c_function_args+=')'

        ## Handle function return type
        jni_rust_function_return_type="$(rust_jni_type_from_c_jni_type "${jni_function_return_type}")"
        #echo "jni_rust_function_return_type: '${jni_rust_function_return_type}'"
        jni_c_function_return_statement=''
        jni_rust_function_return_statement=''

        case "${jni_rust_function_return_type}" in
          JClass|JString)
            if [[ ! "${rust_use_jni_objects}" =~ ${jni_rust_function_return_type} ]]
            then
              rust_use_jni_objects+="${rust_jni_class_objects_delim}${jni_rust_function_return_type}"
              rust_jni_class_objects_delim=', '
            fi
            ;;
          void)
            ;;
          *)
            if [[ ! "${rust_use_jni_sys}" =~ ${jni_rust_function_return_type} ]]
            then
              rust_use_jni_sys+="${rust_jni_class_sys_delim}${jni_rust_function_return_type}"
              rust_jni_class_sys_delim=', '
            fi
            ;;
        esac

        case "${jni_function_return_type}" in
          void)
            ;;
          jstring)
            using_jni_env=1
            read -r -d '' jni_c_function_return_statement <<-EOCRETURN
  return jni_env->NewStringUTF("hello from c jni ${jni_function_name}");
EOCRETURN
            read -r -d '' jni_rust_function_return_statement <<-EORUSTRETURN
  _env
    .new_string("hello from rust jni ${jni_function_name}")
    .expect("Unable to create java string")
    .into_inner()

EORUSTRETURN
            ;;
          jlong)
            jni_c_function_return_statement = 'return 123L;'
            jni_rust_function_return_statement='123'
            ;;
          *)
            echo "ARG I DON'T KNOW HOW TO GENERATE RETURN STATEMENTS FOR RUST FROM '${jni_function_return_type}'" >&2
            exit 1
            ;;
        esac

        if [ ${using_jni_env} -eq 0 ]
        then
          jni_c_function_args="${jni_c_function_args/jni_env//*jni_env*/}"
        fi

        # Now append the c implementation
        cat <<-EOF >>"${jni_c_source_path}"

JNIEXPORT ${jni_function_prefix} ${jni_function_name} ${jni_c_function_args} {
  std::cout << "Hello from JNI Example '${jni_function_name}' !" << std::endl;
  std::cout << "The build is: '" TEXT(BUILD_NAME) "'" << std::endl;
  ${jni_c_function_return_statement}
}
EOF
        
        # Append the rust implementation
        jni_rust_function_return_declaration=''
        if [ -n "${jni_rust_function_return_type}" ] && [ "${jni_rust_function_return_type}" != 'void' ]
        then
          jni_rust_function_return_declaration=" -> ${jni_rust_function_return_type}"
        fi

        cat <<-EOF >>"${jni_rust_source_path}"
#[no_mangle]
extern "C" fn ${jni_function_name}(
${jni_rust_function_args}
)${jni_rust_function_return_declaration} {
  println!("Hello from JNI rust Example '${jni_function_name}' !");
  println!("The build is: '{}'", BUILD_TYPE_NAME);
  ${jni_rust_function_return_statement}
}
EOF

      fi #Â jni source ready to generate
    done <"${jni_c_header_path}"

    # Finish the rust file
    use_jni_objects_statement=''
    use_jni_sys_statement=''

    if [ -n "${rust_use_jni_objects}" ]
    then
      use_jni_objects_statement="use jni::objects::{${rust_use_jni_objects}};"$'\n'
    fi
    if [ -n "${rust_use_jni_sys}" ]
    then
      use_jni_sys_statement="use jni::sys::{${rust_use_jni_sys}};"$'\n'
    fi

    temp_rust_source_file=$(mktemp)
    echo "${use_jni_sys_statement}${use_jni_objects_statement}${use_jni_env_statement}" >"${temp_rust_source_file}" >"${temp_rust_source_file}"
    cat "${jni_rust_source_path}" >>"${temp_rust_source_file}"
    mv "${temp_rust_source_file}" "${jni_rust_source_path}"

    # Finish the Makefile
    case "${os_name}" in
      darwin)
        cxx_shared_flag='-dynamiclib'
        ;;
      *)
        cxx_shared_flag='-shared'
        ;;
    esac

    cat <<-EOF >>"${jni_native_makefile_path}"
\$(OUTPUT_DIR)/${jni_native_c_dylib}: \$(OBJ)
${tab}\$(CXX) ${cxx_shared_flag} -o \$@ \$^ \$(CXXFLAGS)

cleanobj:
${tab}rm -f \$(OBJ)

clean: cleanobj
${tab}rm -f \$(OUTPUT_DIR)/${jni_native_c_dylib}

EOF
  fi # endif no Jni java file
}

function make_local_clean() {
  echo
  echo 'Making local clean file...'
  cat <<-EOF >"${clean_script_path}"
rm -rf '${root_directory}/bin'
rm -rf '${build_directory}'
rm -rf '${gradle_build_directory}'
#( cd '${root_directory}'; cargo clean; )
EOF
  chmod 755 "${clean_script_path}"
}

function make_jni_c_components() {
  echo
  echo 'Making JNI c components...'
  (cd "${root_directory}";
    mkdir -p "${build_directory}/release" "$(get_intermediate_path_from_src_path "${jni_native_code_directory}" 'release')";
    make INTERMEDIATE_DIR="${intermediate_directory}/release" OUTPUT_DIR="${build_directory}/release" OPTIMIZATIONFLAG=-O3 BUILD_NAME='c Release';
    mkdir -p "${build_directory}/debug" "$(get_intermediate_path_from_src_path "${jni_native_code_directory}" 'debug')";
    make INTERMEDIATE_DIR="${intermediate_directory}/debug" OUTPUT_DIR="${build_directory}/debug" BUILD_NAME='c Debug';
  )
}

function make_jni_rust_components() {
  echo
  echo 'Making JNI rust components...'
  (cd "${jni_native_code_rust_directory}";
    cargo build --release;
    cargo build;
  )
}

function make_local_compile() {
  local local_compile_file_path
  local_compile_file_path="${root_directory}/local_compile"
  echo
  echo 'Making local compile file...'
  cat <<-EOF >"${local_compile_file_path}"
#!/usr/bin/env bash

root_directory='.'
build_directory='${build_directory}'
intermediate_directory='${intermediate_directory}'
jni_native_code_directory='${jni_native_code_directory}'
jni_native_code_rust_directory='${jni_native_code_rust_directory}'

EOF
  type get_intermediate_path_from_src_path | tail -n +2 >>"${local_compile_file_path}"
  echo >>"${local_compile_file_path}"
  type make_jni_c_components | tail -n +2 >>"${local_compile_file_path}"
  echo >>"${local_compile_file_path}"
  type make_jni_rust_components | tail -n +2 >>"${local_compile_file_path}"
  chmod 755 "${local_compile_file_path}"
  cat <<-EOF >>"${local_compile_file_path}"

make_jni_c_components
make_jni_rust_components
EOF
}

function make_local_git_ignore() {
  cat <<-EOF >>"${root_directory}/.local.gitignore"
/target
Cargo.lock

*.sw?
# Ignore Gradle build output directory
build/

# Ignore Gradle project-specific cache directory
.gradle

# Ignore bin directory
bin/

# Ignore Intellij stuff
.classpath
.idea/
.project
.settings/
*.iml
EOF
}

function run_gradle() {
  echo 'Running with gradle'
  echo 'Running c extension (gradle)'
  ./gradlew --quiet run
  echo

  ./gradlew --quiet run -D${jni_native_name_hyphenated}.debug-build="true"
  echo

  echo 'Running rust extension (gradle)'
  ./gradlew --quiet run -D${jni_native_name_hyphenated}.rust="true"
  echo

  ./gradlew --quiet run -D${jni_native_name_hyphenated}.rust="true" \
    -D${jni_native_name_hyphenated}.debug-build="true"
  
}

function run_everything() {
  echo 'Running'
  echo 'Running with java'
  echo 'Running c extension (java)'
  java -jar "${use_jar_path}"
  echo

  java -D${jni_native_name_hyphenated}.debug-build="true" -jar "${use_jar_path}"
  echo

  echo 'Running rust extension (java)'
  java -D${jni_native_name_hyphenated}.rust="true" -jar "${use_jar_path}"
  echo

  java -D${jni_native_name_hyphenated}.debug-build="true" \
    -D${jni_native_name_hyphenated}.rust="true" \
    -jar "${use_jar_path}"
  echo

  run_gradle

  echo 'Done running'
}

function make_local_run() {
  local local_run_script_path
  local_run_script_path="${root_directory}/local_run"
  cat <<-EOF >"${local_run_script_path}"
#!/usr/bin/env bash

jni_native_name_hyphenated="${jni_native_name_hyphenated}"
use_jar_path="${use_jar_path}"

EOF
  type run_gradle | tail -n +2 >>"${local_run_script_path}"

  cat <<-EOF >>"${local_run_script_path}"

run_gradle
EOF
  chmod 755 "${local_run_script_path}"
}

## Script
### Create the top level directories
echo
echo 'Making build structure'
rm -rf "${build_directory}"
ensure_dir "${jni_native_build_directory}" "Making jni build directory ${jni_native_build_directory}"
ensure_dir "${intermediate_directory}"

echo 'Making source'
ensure_dir "${java_source_code_directory}"
ensure_dir "${classfiles_directory}"
ensure_dir "${jar_directory}"

ensure_dir "${jni_native_code_directory}" 'Creating jni directories.'
ensure_dir "${jni_java_source_code_directory}" 'Making JNI on java side.'

for java_class in "${typical_java_classes[@]}"
do
  make_typical_java "${java_class}"
done

make_main_java "${java_source_code_directory}" "${typical_java_classes[@]}"
make_manifest_file "${manifest_directory}" "${manifest_path}"
run_gradle_init

make_jni_example_init_java "${jni_java_source_code_directory}" "${jni_native_name}" "${jni_native_name_upper}" "${jni_native_name_hyphenated}"
make_rust_jni "${jni_native_rust_name}" "${jni_native_code_rust_directory}" "${jni_native_code_rust_source_directory}"
make_jni_example

make_local_clean
make_local_compile
make_local_git_ignore
make_local_run

echo
echo 'Done generating'
