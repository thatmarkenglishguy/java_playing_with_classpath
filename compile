#!/usr/bin/env bash

#Deduce this script's directory
if [ -z ${BASH_SOURCE} ]; then
  script_dir=$(readlink -f $(dirname "${0}"))
else
  script_dir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

source "${script_dir}/configuration" "${@}"

root_directory="${root_directory:-.}"
build_directory="${build_directory:-${root_directory}/build}"
intermediate_directory="${intermediate_directory:-${build_directory}/intermediate}"

echo 'Compiling'
declare -a typical_java_java_files
for java_class in "${typical_java_classes[@]}"
do
  typical_java_java_files+=( "${java_source_code_directory}/${java_class}.java" )
done

function create_jar() {
  echo
  echo 'Creating jar...'
  use_classfiles_directory="${classfiles_package_subdirectory}"
  declare -a typical_java_class_files
  for java_class in "${typical_java_classes[@]}"
  do
    typical_java_class_files+=( '-C' )
    typical_java_class_files+=( "${classfiles_directory}" )
    typical_java_class_files+=( "${use_classfiles_directory}/${java_class}.class" )
  done
 
  # -c create
  # -v verbose
  # -f from file
  # -m Create manifest from specified manifest file
  # File order is significant: jar_path manifest_path [.class files]
  jar \
    -cvfm "${jar_path}" \
    "${manifest_path}" \
    "${typical_java_class_files[@]}" \
    -C "${classfiles_directory}" \
    "${use_classfiles_directory}/Main.class" \
    -C "${classfiles_directory}" \
    "${use_classfiles_directory}/jni/JniExampleInit.class" \
    -C "${classfiles_directory}" \
    "${use_classfiles_directory}/jni/JniExampleInit\$JniBuild.class" \
    -C "${classfiles_directory}" \
    "${use_classfiles_directory}/jni/JniExampleInit\$JniImplementation.class" \
    -C "${classfiles_directory}" \
    "${use_classfiles_directory}/jni/JniExample.class" \
    -C "${build_directory}" \
    "release/${jni_native_c_dylib}" \
    -C "${build_directory}" \
    "debug/${jni_native_c_dylib}" \
    -C "${rust_target_directory}" \
    "release/${jni_native_rust_dylib}" \
    -C "${rust_target_directory}" \
    "debug/${jni_native_rust_dylib}"
}


echo 'Running javac to create class files...'
# -g Debug info
# -d Directory to put class files in
# -Xlint:all Enables all warnings
javac \
  -d "${classfiles_directory}" \
  -Xlint:all \
  -verbose \
  "${typical_java_java_files[@]}" \
  "${jni_java_source_code_directory}/JniExample.java" \
  "${jni_java_source_code_directory}/JniExampleInit.java" \
  "${java_source_code_directory}/Main.java"

"${root_directory}/local_compile"

create_jar
echo
echo 'Building with gradle'
./gradlew build
echo
echo 'Done compiling'

